[user]
  name = <%= userName %>
  email = <%= email %>

[init]
  ## Templates directory (for git hooks, etc)
  # templatedir = ~/.git_template

[core]
  excludesfile = ~/.gitignore

  ## Handle line endings
  autocrlf = <%= crlf %>

  ## Only show messages in a pager if longer than one screen
  pager = less -+F -+X

[branch]
  ## Default all new branches to fetch and rebase - not merge
  autosetuprebase = always

[merge]
  ## Make all merges no-ff
  # ff = false

[pull]
  ## Default pulls to fetch and rebase - not merge
  rebase = true

[push]
  ## Limit `push` to only pushing changes the currently active
  ## branch, and only if its tracking branch is of the same name
  default = simple

  ## Also push tags when pushing changes
  followTags = true

[rerere]
  ## Record any merge conflict resolutions and reuse them automatically
  # enabled = true

[alias]
  co = checkout
  cm = commit
  br = branch
  cp = cherry-pick
  a = add

  ## Concise status
  s = status -s

  ## Delete a branch locally and on origin
  db = "!f() { \
    git branch -d $1 && \
    git push origin :$1; \
  }; f"

  ## Sync local with remote
  up = "!git pull --prune && git submodule update --init --recursive"

  ## Sync master and return to current branch
  upmaster = "!f() { \
    local branch=$(git rev-parse --abbrev-ref HEAD); \
    git checkout master && \
    git up && \
    git checkout $branch; \
  }; f"

  ## Update before creating a new branch
  nb = "!git up && git checkout -b"
  new-branch = "!git nb"

  ## Merge without fast-forward, for merging branches.
  mnff = merge --no-ff
  mb = "!git mnff"
  merge-branch = "!git mnff"

  ## Push submodules together with main repo
  pushall = push --recurse-submodules=on-demand

  ## Succinct log with graph
  lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(magenta)%s%C(reset) %C(dim white)- %an%C(reset)' --all

  ## Log changed files in each commit
  ls = log --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''%C(bold yellow)%s%C(reset) %C(dim white)- %an%C(reset)' --all --numstat

  ## Show actual history of commits
  hist = log -p --follow --

  ## Find commits containing a provided string in the changed source files.
  ## Takes a regular expression
  find = log --source --all -p -G

  delete-merged-local = "!f() { \
    if [ `git branch --merged | grep -v \"\\*\" | grep -v master | grep -v dev | grep -v \"release/\"` ]; then \
      git branch --merged | grep -v \"\\*\" | grep -v master | grep -v dev | grep -v \"release/\" | xargs -n 1 git branch -d; \
    fi \
  }; f"

  delete-merged-remote = "!f() { \
    if [ `git branch -r --merged | grep -v \"\\*\" | grep -v master | grep -v dev | grep -v \"release/\"` ]; then \
      git branch -r --merged | grep -v \"\\*\" | grep -v master | grep -v dev | grep -v \"release/\" | sed 's|origin/||' | xargs -n 1 git push --delete origin; \
    fi \
  }; f"

  ## Delete all branches that were mereged into the current one
  delete-merged = !git delete-merged-local && git delete-merged-remote

  ## Unstage file(s) that have been added to the staging area  (Can optionally take a file name).
  unstage = reset HEAD --

  ## Undo last commit (but don't change content of files on disk)
  undo = git reset --soft HEAD~1

  ## Diff staged files (Can optionally take a file name).
  diff-staged = diff -cached --

  ## Checkout the latest release
  last-release = "!f() { \
    git fetch --tags && \
    git checkout $(git describe --tags `git rev-list --tags --max-count=1`); \
  }; f"

  ## Create a new hotfix branch
  hotfix = "!f(){ \
    git last-release -q  && \
    printf \"\nCreating new hotfix branch from $(git describe --tags `git rev-list --tags --max-count=1`)\n\" && \
    git checkout -b hotfix/$1; \
  }; f"

 feature = "!f() { \
    cleartext=$(sed 's/ /-/g' <<<$@) && \
    git checkout master && \
    git up && \
    git checkout -b feature/$cleartext;\
  }; f"

  release = "!f() { \
    git checkout master && \
    git up && \
    git checkout -b release/$1;\
  }; f"

  ## Clean working directory from untracked files
  clean = git clean -fd

  ## Create a temporary working tree for making quick changes while working on a branch
  temp-tree = "!f() { \
    cyan=$(tput setaf 14); \
    magenta=$(tput setaf 1); \
    gray=$(tput setaf 248); \
    normal=$(tput sgr0); \
    if [ -z \"$1\" ]; then \
      printf \"\n${magenta}Error:${cyan} A name for the new branch must be provided as the first argument${normal}\n\" 1>&2;\
      printf \"\n${magenta}Usage:${normal} git temp-tree ${gray}<new-branch> <path> [<base-branch]${normal}\n\n       ${gray}When base-branch is not provided, \"master\" will be used by default${normal}\n\"; \
      exit 1; \
    fi; \
    if [ -z \"$2\" ]; then \
      printf \"\n${magenta}Error:${cyan} A path for the new worktree must be provided as the second argument${normal}\n\" 1>&2;\
      printf \"\n${magenta}Usage:${normal} git temp-tree ${gray}<new-branch> <path> [<base-branch]${normal}\n\n       ${gray}When base-branch is not provided, \"master\" will be used by default${normal}\n\"; \
      exit 1; \
    fi;\
    if [ -z \"$3\" ]; then \
      path='master'; \
    else \
      path=$3; \
    fi;\
    git worktree add -b $1 $2 $path && \
    cd $2; \
   }; f"
  ## Show last --count branches worked on (default: 10)
  last = "!git for-each-ref --sort=-committerdate --count=10 --format='%(refname:short)' refs/heads/"
